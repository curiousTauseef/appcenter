import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump-qt5 -noinstantiate -nonrelocatable Liri.AppCenter 1.0 /home/plfiorini/git/liri/lirios/.build/install-root/lib/qml'

Module {
    dependencies: ["QtQuick 2.8"]
    Component {
        name: "FilteredResourcesModel"
        prototype: "QSortFilterProxyModel"
        exports: ["Liri.AppCenter/FilteredResourcesModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Filter"
            values: {
                "AllApps": 0,
                "NotInstalledApps": 1,
                "InstalledApps": 2,
                "Updates": 3
            }
        }
        Property { name: "filter"; type: "Filter" }
    }
    Component {
        name: "Liri::AppCenter::ResourcesModel"
        prototype: "QAbstractListModel"
        exports: ["Liri.AppCenter/ResourcesModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Liri::AppCenter::ScreenshotsModel"
        prototype: "QAbstractListModel"
        exports: ["Liri.AppCenter/ScreenshotsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "app"; type: "SoftwareResource"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "thumbnailUrlAt"
            type: "QUrl"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "screenshotUrlAt"
            type: "QUrl"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "Liri::AppCenter::SoftwareManager"
        prototype: "QObject"
        exports: ["Liri.AppCenter/SoftwareManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sourcesModel"; type: "SourcesModel"; isReadonly: true; isPointer: true }
        Property { name: "resourcesModel"; type: "ResourcesModel"; isReadonly: true; isPointer: true }
        Property { name: "hasUpdates"; type: "bool"; isReadonly: true }
        Property { name: "updatesCount"; type: "uint"; isReadonly: true }
        Signal { name: "initializationCompleted" }
        Signal {
            name: "sourceAdded"
            Parameter { name: "source"; type: "SoftwareSource"; isPointer: true }
        }
        Signal {
            name: "sourceAddFailed"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "updatesAvailable"
            Parameter { name: "count"; type: "uint" }
        }
        Method { name: "initialize" }
        Method { name: "checkForUpdates" }
        Method {
            name: "addSource"
            type: "bool"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "removeSource"
            type: "bool"
            Parameter { name: "source"; type: "SoftwareSource"; isPointer: true }
        }
    }
    Component {
        name: "Liri::AppCenter::SoftwareResource"
        prototype: "QObject"
        exports: ["Liri.AppCenter/SoftwareResource 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "Addon": 0,
                "App": 1,
                "Codec": 2,
                "Driver": 3,
                "Firmware": 4,
                "Font": 5,
                "Generic": 6,
                "InputMethod": 7,
                "Localization": 8,
                "Runtime": 9,
                "Theme": 10
            }
        }
        Enum {
            name: "State"
            values: {
                "InstalledState": 0,
                "NotInstalledState": 1,
                "UpgradableState": 2,
                "BrokenState": 3
            }
        }
        Property { name: "type"; type: "Type"; isReadonly: true }
        Property { name: "state"; type: "State"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "summary"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "iconName"; type: "string"; isReadonly: true }
        Property { name: "iconUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "packageName"; type: "string"; isReadonly: true }
        Property { name: "architecture"; type: "string"; isReadonly: true }
        Property { name: "license"; type: "string"; isReadonly: true }
        Property { name: "origin"; type: "string"; isReadonly: true }
        Property { name: "category"; type: "string"; isReadonly: true }
        Property { name: "homepageUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "bugtrackerUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "faqUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "helpUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "donationUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "translateUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "version"; type: "string"; isReadonly: true }
        Property { name: "installedVersion"; type: "string"; isReadonly: true }
        Property { name: "availableVersion"; type: "string"; isReadonly: true }
        Property { name: "updatesAvailable"; type: "bool"; isReadonly: true }
        Property { name: "downloadSize"; type: "qulonglong"; isReadonly: true }
        Property { name: "installedSize"; type: "qulonglong"; isReadonly: true }
        Property { name: "changeLog"; type: "string"; isReadonly: true }
        Property { name: "localized"; type: "bool"; isReadonly: true }
        Signal { name: "installed" }
        Signal { name: "updated" }
        Signal { name: "uninstalled" }
        Method { name: "launch"; type: "bool" }
        Method { name: "install"; type: "bool" }
        Method { name: "uninstall"; type: "bool" }
        Method { name: "update"; type: "bool" }
    }
    Component {
        name: "Liri::AppCenter::SoftwareSource"
        prototype: "QObject"
        exports: ["Liri.AppCenter/SoftwareSource 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "backend"; type: "QObject"; isPointer: true }
        Property { name: "name"; type: "string" }
        Property { name: "title"; type: "string" }
        Property { name: "section"; type: "string" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "url"; type: "QUrl" }
        Property { name: "priority"; type: "int" }
    }
    Component {
        name: "Liri::AppCenter::SourcesModel"
        prototype: "QAbstractListModel"
        exports: ["Liri.AppCenter/SourcesModel 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Property { name: "recursiveFilteringEnabled"; type: "bool" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
}
